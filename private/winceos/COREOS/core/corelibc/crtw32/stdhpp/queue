//
// Copyright (c) Microsoft Corporation.  All rights reserved.
//
//
// Use of this source code is subject to the terms of the Microsoft shared
// source or premium shared source license agreement under which you licensed
// this source code. If you did not accept the terms of the license agreement,
// you are not authorized to use this source code. For the terms of the license,
// please see the license agreement between you and Microsoft or, if applicable,
// see the SOURCE.RTF on your install media or the root of your tools installation.
// THE SOURCE CODE IS PROVIDED "AS IS", WITH NO WARRANTIES OR INDEMNITIES.
//
// queue standard header
#pragma once
#ifndef _QUEUE_
#define _QUEUE_
#ifndef RC_INVOKED
#include <algorithm>
#include <deque>
#include <vector>

 #pragma pack(push,_CRT_PACKING)
 #pragma warning(push,3)
 #pragma push_macro("new")
 #undef new
_STD_BEGIN
		// TEMPLATE CLASS queue
template<class _Ty,
	class _Container = deque<_Ty> >
	class queue
	{	// FIFO queue implemented with a container
public:
	typedef queue<_Ty, _Container> _Myt;
	typedef _Container container_type;
	typedef typename _Container::value_type value_type;
	typedef typename _Container::size_type size_type;
	typedef typename _Container::reference reference;
	typedef typename _Container::const_reference const_reference;

	queue()
		: c()
		{	// construct with empty container
		}

	queue(const _Myt& _Right)
		: c(_Right.c)
		{	// construct by copying _Right container
		}

	explicit queue(const _Container& _Cont)
		: c(_Cont)
		{	// construct by copying specified container
		}

	_Myt& operator=(const _Myt& _Right)
		{	// assign by copying _Right
		c = _Right.c;
		return (*this);
		}

 #if _HAS_CPP0X
	template<class _Alloc>
		explicit queue(const _Alloc& _Al,
			typename enable_if<uses_allocator<_Container, _Alloc>::value,
				void>::type ** = 0)
		: c(_Al)
		{	// construct with empty container, allocator
		}

	template<class _Alloc>
		queue(const _Container& _Cont, const _Alloc& _Al,
			typename enable_if<uses_allocator<_Container, _Alloc>::value,
				void>::type ** = 0)
		: c(_Cont, _Al)
		{	// construct by copying specified container, allocator
		}

	template<class _Alloc>
		queue(const _Myt& _Right, const _Alloc& _Al,
			typename enable_if<uses_allocator<_Container, _Alloc>::value,
				void>::type ** = 0)
		: c(_Right.c, _Al)
		{	// construct by copying _Right container, allocator
		}
 #endif /* _HAS_CPP0X */

	queue(_Myt&& _Right)
		: c(_STD move(_Right.c))
		{	// construct by moving _Right
		}

	explicit queue(_Container&& _Cont)
		: c(_STD move(_Cont))
		{	// construct by moving specified container
		}

	template<class _Alloc>
		queue(_Container&& _Cont, const _Alloc& _Al,
			typename enable_if<uses_allocator<_Container, _Alloc>::value,
				void>::type ** = 0)
		: c(_STD move(_Cont), _Al)
		{	// construct by moving specified container, allocator
		}

	template<class _Alloc>
		queue(_Myt&& _Right, const _Alloc& _Al,
			typename enable_if<uses_allocator<_Container, _Alloc>::value,
				void>::type ** = 0)
		: c(_STD move(_Right.c), _Al)
		{	// construct by moving _Right container, allocator
		}

	_Myt& operator=(_Myt&& _Right)
		{	// assign by moving _Right
		c = _STD move(_Right.c);
		return (*this);
		}

	void push(value_type&& _Val)
		{	// insert element at beginning
		c.push_back(_STD move(_Val));
		}

#define _QUEUE_EMPLACE( \
	TEMPLATE_LIST, PADDING_LIST, LIST, COMMA, X1, X2, X3, X4) \
	TEMPLATE_LIST(_CLASS_TYPE) \
		void emplace(LIST(_TYPE_REFREF_ARG)) \
		{	/* insert element at beginning */ \
		c.emplace_back(LIST(_FORWARD_ARG)); \
		}

_VARIADIC_EXPAND_0X(_QUEUE_EMPLACE, , , , )
#undef _QUEUE_EMPLACE

	bool empty() const
		{	// test if queue is empty
		return (c.empty());
		}

	size_type size() const
		{	// return length of queue
		return (c.size());
		}

	reference front()
		{	// return first element of mutable queue
		return (c.front());
		}

	const_reference front() const
		{	// return first element of nonmutable queue
		return (c.front());
		}

	reference back()
		{	// return last element of mutable queue
		return (c.back());
		}

	const_reference back() const
		{	// return last element of nonmutable queue
		return (c.back());
		}

	void push(const value_type& _Val)
		{	// insert element at beginning
		c.push_back(_Val);
		}

	void pop()
		{	// erase element at end
		c.pop_front();
		}

	const _Container& _Get_container() const
		{	// get reference to container
		return (c);
		}

	void swap(_Myt& _Right)
		{	// exchange contents with _Right
		_Swap_adl(c, _Right.c);
		}

protected:
	_Container c;	// the underlying container
	};

		// queue TEMPLATE FUNCTIONS
template<class _Ty,
	class _Container> inline
	void swap(queue<_Ty, _Container>& _Left,
		queue<_Ty, _Container>& _Right)
	{	// swap _Left and _Right queues
	_Left.swap(_Right);
	}

template<class _Ty,
	class _Container> inline
	bool operator==(const queue<_Ty, _Container>& _Left,
		const queue<_Ty, _Container>& _Right)
	{	// test for queue equality
	return (_Left._Get_container() == _Right._Get_container());
	}

template<class _Ty,
	class _Container> inline
	bool operator!=(const queue<_Ty, _Container>& _Left,
		const queue<_Ty, _Container>& _Right)
	{	// test for queue inequality
	return (!(_Left == _Right));
	}

template<class _Ty,
	class _Container> inline
	bool operator<(const queue<_Ty, _Container>& _Left,
		const queue<_Ty, _Container>& _Right)
	{	// test if _Left < _Right for queues
	return (_Left._Get_container() < _Right._Get_container());
	}

template<class _Ty,
	class _Container> inline
	bool operator>(const queue<_Ty, _Container>& _Left,
		const queue<_Ty, _Container>& _Right)
	{	// test if _Left > _Right for queues
	return (_Right < _Left);
	}

template<class _Ty,
	class _Container> inline
	bool operator<=(const queue<_Ty, _Container>& _Left,
		const queue<_Ty, _Container>& _Right)
	{	// test if _Left <= _Right for queues
	return (!(_Right < _Left));
	}

template<class _Ty,
	class _Container> inline
	bool operator>=(const queue<_Ty, _Container>& _Left,
		const queue<_Ty, _Container>& _Right)
	{	// test if _Left >= _Right for queues
	return (!(_Left < _Right));
	}

		// TEMPLATE CLASS priority_queue
template<class _Ty,
	class _Container = vector<_Ty>,
	class _Pr = less<typename _Container::value_type> >
	class priority_queue
	{	// priority queue implemented with a _Container
public:
	typedef priority_queue<_Ty, _Container, _Pr> _Myt;
	typedef _Container container_type;
	typedef typename _Container::value_type value_type;
	typedef typename _Container::size_type size_type;
	typedef typename _Container::reference reference;
	typedef typename _Container::const_reference const_reference;

	priority_queue()
		: c(), comp()
		{	// construct with empty container, default comparator
		}

	priority_queue(const _Myt& _Right)
		: c(_Right.c), comp(_Right.comp)
		{	// construct by copying _Right
		}

	explicit priority_queue(const _Pr& _Pred)
		: c(), comp(_Pred)
		{	// construct with empty container, specified comparator
		}

	priority_queue(const _Pr& _Pred, const _Container& _Cont)
		: c(_Cont), comp(_Pred)
		{	// construct by copying specified container, comparator
		make_heap(c.begin(), c.end(), comp);
		}

	template<class _InIt>
		priority_queue(_InIt _First, _InIt _Last)
		: c(_First, _Last), comp()
		{	// construct by copying [_First, _Last), default comparator
		make_heap(c.begin(), c.end(), comp);
		}

	template<class _InIt>
		priority_queue(_InIt _First, _InIt _Last, const _Pr& _Pred)
		: c(_First, _Last), comp(_Pred)
		{	// construct by copying [_First, _Last), specified comparator
		make_heap(c.begin(), c.end(), comp);
		}

	template<class _InIt>
		priority_queue(_InIt _First, _InIt _Last, const _Pr& _Pred,
			const _Container& _Cont)
		: c(_Cont), comp(_Pred)
		{	// construct by copying [_First, _Last), container, and comparator
		c.insert(c.end(), _First, _Last);
		make_heap(c.begin(), c.end(), comp);
		}

	_Myt& operator=(const _Myt& _Right)
		{	// assign by copying _Right
		c = _Right.c;
		comp = _Right.comp;
		return (*this);
		}

 #if _HAS_CPP0X
	template<class _Alloc>
		explicit priority_queue(const _Alloc& _Al,
			typename enable_if<uses_allocator<_Container, _Alloc>::value,
				void>::type ** = 0)
		: c(_Al)
		{	// construct with empty container, allocator
		}

	template<class _Alloc>
		priority_queue(const _Pr& _Pred, const _Alloc& _Al,
			typename enable_if<uses_allocator<_Container, _Alloc>::value,
				void>::type ** = 0)
		: c(_Al), comp(_Pred)
		{	// construct with empty container, comparator, allocator
		}

	template<class _Alloc>
		priority_queue(const _Pr& _Pred, const _Container& _Cont,
			const _Alloc& _Al,
			typename enable_if<uses_allocator<_Container, _Alloc>::value,
				void>::type ** = 0)
		: c(_Cont, _Al), comp(_Pred)
		{	// construct by copying specified container, comparator, allocator
		make_heap(c.begin(), c.end(), comp);
		}

	template<class _Alloc>
		priority_queue(const _Myt& _Right, const _Alloc& _Al,
			typename enable_if<uses_allocator<_Container, _Alloc>::value,
				void>::type ** = 0)
		: c(_Right.c, _Al), comp(_Right.comp)
		{	// construct by copying _Right, allocator
		}
 #endif /* _HAS_CPP0X */

	priority_queue(_Myt&& _Right)
		: c(_STD move(_Right.c)), comp(_STD move(_Right.comp))
		{	// construct by moving _Right
		}

	priority_queue(const _Pr& _Pred, _Container&& _Cont)
		: c(_STD move(_Cont)), comp(_Pred)
		{	// construct by moving specified container, comparator
		make_heap(c.begin(), c.end(), comp);
		}

	template<class _InIt>
		priority_queue(_InIt _First, _InIt _Last, const _Pr& _Pred,
			_Container&& _Cont)
		: c(_STD move(_Cont)), comp(_Pred)
		{	// construct by copying [_First, _Last), moving container
		c.insert(c.end(), _First, _Last);
		make_heap(c.begin(), c.end(), comp);
		}

	template<class _Alloc>
		priority_queue(const _Pr& _Pred, _Container&& _Cont,
			const _Alloc& _Al,
			typename enable_if<uses_allocator<_Container, _Alloc>::value,
				void>::type ** = 0)
		: c(_STD move(_Cont), _Al), comp(_Pred)
		{	// construct by moving specified container, comparator, allocator
		make_heap(c.begin(), c.end(), comp);
		}

	template<class _Alloc>
		priority_queue(_Myt&& _Right, const _Alloc& _Al,
			typename enable_if<uses_allocator<_Container, _Alloc>::value,
				void>::type ** = 0)
		: c(_STD move(_Right.c), _Al), comp(_Right.comp)
		{	// construct by moving _Right, allocator
		}

	_Myt& operator=(_Myt&& _Right)
		{	// assign by moving _Right
		c = _STD move(_Right.c);
		comp = _Right.comp;
		return (*this);
		}

	void push(value_type&& _Val)
		{	// insert element at beginning
		c.push_back(_STD move(_Val));
		push_heap(c.begin(), c.end(), comp);
		}

#define _PQUEUE_EMPLACE( \
	TEMPLATE_LIST, PADDING_LIST, LIST, COMMA, X1, X2, X3, X4) \
	TEMPLATE_LIST(_CLASS_TYPE) \
		void emplace(LIST(_TYPE_REFREF_ARG)) \
		{	/* insert element at beginning */ \
		c.emplace_back(LIST(_FORWARD_ARG)); \
		push_heap(c.begin(), c.end(), comp); \
		}

_VARIADIC_EXPAND_0X(_PQUEUE_EMPLACE, , , , )
#undef _PQUEUE_EMPLACE

	bool empty() const
		{	// test if queue is empty
		return (c.empty());
		}

	size_type size() const
		{	// return length of queue
		return (c.size());
		}

	const_reference top() const
		{	// return highest-priority element
		return (c.front());
		}

	reference top()
		{	// return mutable highest-priority element (retained)
		return (c.front());
		}

	void push(const value_type& _Val)
		{	// insert value in priority order
		c.push_back(_Val);
		push_heap(c.begin(), c.end(), comp);
		}

	void pop()
		{	// erase highest-priority element
		pop_heap(c.begin(), c.end(), comp);
		c.pop_back();
		}

	void swap(_Myt& _Right)
		{	// exchange contents with _Right
		_Swap_adl(c, _Right.c);
		_Swap_adl(comp, _Right.comp);
		}

protected:
	_Container c;	// the underlying container
	_Pr comp;	// the comparator functor
	};

		// priority_queue TEMPLATE FUNCTIONS
template<class _Ty,
	class _Container,
	class _Pr> inline
	void swap(priority_queue<_Ty, _Container, _Pr>& _Left,
		priority_queue<_Ty, _Container, _Pr>& _Right)
	{	// swap _Left and _Right queues
	_Left.swap(_Right);
	}
_STD_END

 #if _HAS_CPP0X
namespace std {
template<class _Ty,
	class _Container,
	class _Alloc>
	struct uses_allocator<queue<_Ty, _Container>, _Alloc>
		: uses_allocator<_Container, _Alloc>
	{	// true_type if container allocator enabled
	};

template<class _Ty,
	class _Container,
	class _Pr,
	class _Alloc>
	struct uses_allocator<priority_queue<_Ty, _Container, _Pr>, _Alloc>
		: uses_allocator<_Container, _Alloc>
	{	// true_type if container allocator enabled
	};
}	// namespace std
 #endif /* _HAS_CPP0X */

 #pragma pop_macro("new")
 #pragma warning(pop)
 #pragma pack(pop)
#endif /* RC_INVOKED */
#endif /* _QUEUE_ */

/*
 * This file is derived from software bearing the following
 * restrictions:
 *
 * Copyright (c) 1994
 * Hewlett-Packard Company
 *
 * Permission to use, copy, modify, distribute and sell this
 * software and its documentation for any purpose is hereby
 * granted without fee, provided that the above copyright notice
 * appear in all copies and that both that copyright notice and
 * this permission notice appear in supporting documentation.
 * Hewlett-Packard Company makes no representations about the
 * suitability of this software for any purpose. It is provided
 * "as is" without express or implied warranty.
 */

/*
 * Copyright (c) 1992-2012 by P.J. Plauger.  ALL RIGHTS RESERVED.
 * Consult your license regarding permissions and restrictions.
V6.00:0009 */
