//
// Copyright (c) Microsoft Corporation.  All rights reserved.
//
//
// Use of this source code is subject to the terms of the Microsoft shared
// source or premium shared source license agreement under which you licensed
// this source code. If you did not accept the terms of the license agreement,
// you are not authorized to use this source code. For the terms of the license,
// please see the license agreement between you and Microsoft or, if applicable,
// see the SOURCE.RTF on your install media or the root of your tools installation.
// THE SOURCE CODE IS PROVIDED "AS IS", WITH NO WARRANTIES.
//
#include "storeincludes.hpp"
#include "stgmarshal.hpp"

BOOL IsValidHandle(STOREHANDLE *pStoreHandle)
{
    BOOL fValid = FALSE;
    __try {
        if ((pStoreHandle->dwSig == STORE_HANDLE_SIG) || (pStoreHandle->dwSig == PART_HANDLE_SIG)){
            if (pStoreHandle->dwFlags & STOREHANDLE_TYPE_INTERNAL) {
                fValid = TRUE;
            } else {    
                fValid = IsValidStore( pStoreHandle->pStore);
            }    
        }    
    } __except(EXCEPTION_EXECUTE_HANDLER) {
        fValid = FALSE;
    }
    return fValid;
}

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */


HANDLE WINAPI STG_FindFirstStore(STOREINFO *pInfo, HANDLE hProc)
{
    HANDLE hFindStore = INVALID_HANDLE_VALUE;
    DEBUGMSG( ZONE_STOREAPI, (L"FSDMGR:STG_FindFirstStore()\r\n"));
    // NOTE: pInfo was already mapped by filesys
    LockStoreMgr();
    __try {
        if (pInfo->cbSize == sizeof(STOREINFO)) {
            StoreDisk_t *pStore = g_pStoreRoot;
            while(pStore) {
                if (!(pStore->m_dwFlags & STORE_FLAG_DETACHED)) {
                    break;
                }
                pStore = pStore->m_pNextStore;
            }
            if (pStore) {
                SEARCHSTORE *pSearch = new SEARCHSTORE;
                if (pSearch) {
                    pSearch->pStore = pStore;
                    pSearch->pStore->GetStoreInfo( pInfo);
                    pSearch->pPartition = INVALID_PARTITION;
                    pSearch->pNext = NULL;
                    pSearch->dwFlags = STOREHANDLE_TYPE_SEARCH;
                    pSearch->hProc = hProc;
                    pSearch->dwSig = STORE_HANDLE_SIG;
                    hFindStore = CreateAPIHandle(g_hFindStoreApi, pSearch);
                    if (hFindStore != INVALID_HANDLE_VALUE) {
                        AddHandleToList(&g_pRootHandle, pSearch);
                    }
                }
            } else {
                SetLastError(ERROR_NO_MORE_ITEMS);
            }    
        }  else {
            SetLastError(ERROR_BAD_ARGUMENTS);
        }    
    } __except( EXCEPTION_EXECUTE_HANDLER) {
        SetLastError(ERROR_BAD_ARGUMENTS);
    }
    UnlockStoreMgr();
    return hFindStore;
}

BOOL WINAPI STG_FindNextStore(SEARCHSTORE *pSearch, STOREINFO *pInfo, DWORD SizeOfInfo)
{
#ifdef UNDER_CE
    if (sizeof (STOREINFO) != SizeOfInfo) {
        DEBUGCHK (0); // FindNextFileW_Trap macro was called directly w/out proper size.
        SetLastError (ERROR_INVALID_PARAMETER);
        return FALSE;
    }
#endif
    
    BOOL bRet = FALSE;
    DEBUGMSG( ZONE_STOREAPI, (L"FSDMGR:STG_FindNextStore(0x%08X)\r\n", pSearch));
    LockStoreMgr();

    __try {
        if (pInfo->cbSize == sizeof(STOREINFO)) {
            if (IsValidHandle(pSearch)) {
                if (pSearch->dwFlags & STOREHANDLE_TYPE_CURRENT) {
                    pSearch->dwFlags &= ~STOREHANDLE_TYPE_CURRENT;
                } else {
                    StoreDisk_t *pStore = pSearch->pStore->m_pNextStore;
                    while(pStore) {
                        if (!(pStore->m_dwFlags & STORE_FLAG_DETACHED)) {
                            break;
                        }
                        pStore = pStore->m_pNextStore;
                    }
                    pSearch->pStore = pStore;
                }    
                if (pSearch->pStore && (pSearch->pStore != INVALID_STORE)) {
                    pSearch->pStore->GetStoreInfo( pInfo);
                    bRet = TRUE;
                } else {
                    SetLastError(ERROR_NO_MORE_ITEMS);
                }    
            } 
        }  else {
            SetLastError( ERROR_BAD_ARGUMENTS);
        }    
    } __except( EXCEPTION_EXECUTE_HANDLER) {
        SetLastError(ERROR_BAD_ARGUMENTS);
        bRet = FALSE;
    }
    UnlockStoreMgr();
    return bRet;
}

BOOL WINAPI STG_FindCloseStore(SEARCHSTORE *pSearch)
{
    DEBUGMSG( ZONE_STOREAPI, (L"FSDMGR:STG_FindCloseStore(0x%08X)\r\n", pSearch));
    BOOL fRet = FALSE;

    LockStoreMgr();
    __try {

        fRet = DeleteHandleFromList(&g_pRootHandle, pSearch);

    } __except( EXCEPTION_EXECUTE_HANDLER) {
        SetLastError(ERROR_BAD_ARGUMENTS);
        fRet = FALSE;
    }
    UnlockStoreMgr();

    if (fRet) {
        delete pSearch;
    }
    return fRet;
}

HANDLE WINAPI STG_OpenStore(LPCTSTR szDeviceName, HANDLE hProc)
{
    HANDLE hStore = INVALID_HANDLE_VALUE;
    DEBUGMSG( ZONE_STOREAPI, (L"FSDMGR:STG_OpenStore(%s)\r\n", szDeviceName));
    STOREHANDLE *pStoreHandle = new STOREHANDLE;
    // NOTE: szDeviceName pointer was already mapped by filesys
    if (pStoreHandle) {
        LockStoreMgr();
        pStoreHandle->pStore = g_pStoreRoot;
        pStoreHandle->pPartition = INVALID_PARTITION;
        pStoreHandle->pNext = NULL;
        pStoreHandle->dwFlags = 0;
        pStoreHandle->hProc = hProc;
        pStoreHandle->dwSig = STORE_HANDLE_SIG;
        if (hProc == reinterpret_cast<HANDLE> (GetCurrentProcessId())) {
            pStoreHandle->dwFlags |= STOREHANDLE_TYPE_INTERNAL;
        }
        __try {
            while(pStoreHandle->pStore && (pStoreHandle->pStore != INVALID_STORE)) {
                if (wcsicmp( szDeviceName, pStoreHandle->pStore->m_szDeviceName) == 0) {
                    break;
                }    
                pStoreHandle->pStore = pStoreHandle->pStore->m_pNextStore;
            }
            if (pStoreHandle->pStore && (pStoreHandle->pStore != INVALID_STORE)) {
                hStore = CreateAPIHandle(g_hStoreApi, pStoreHandle);
                if (hStore != INVALID_HANDLE_VALUE) {
                    AddHandleToList(&g_pRootHandle, pStoreHandle);
                 } else {
                    delete pStoreHandle;
                    pStoreHandle = NULL;
                }   
            } else {
                SetLastError(ERROR_DEVICE_NOT_AVAILABLE);
            }
        } __except(EXCEPTION_EXECUTE_HANDLER) {
            SetLastError(ERROR_BAD_ARGUMENTS);
        }
        UnlockStoreMgr();
    }    
    if ((hStore == INVALID_HANDLE_VALUE) && pStoreHandle){
        delete pStoreHandle;
    }   
    return hStore;
}

// Close a store or partition handle.
BOOL WINAPI STG_CloseHandle(PSTOREHANDLE pStoreHandle)
{
    DEBUGMSG (ZONE_STOREAPI, (L"FSDMGR!STG_CloseHandle(0x%08X)\r\n", pStoreHandle));
    BOOL fRet = FALSE;

    LockStoreMgr ();
    __try {

        StoreDisk_t *pStore = pStoreHandle->pStore;

        if (pStoreHandle->dwSig == PART_HANDLE_SIG) {

            if (pStore && (pStore != INVALID_STORE)) {

                // This is a partition handle, remove it from the store's
                // current open handle list if the store is still present.
                pStore->Lock ();
                __try {
                    fRet = DeleteHandleFromList (&pStore->m_pRootHandle, pStoreHandle);
                } __except (EXCEPTION_EXECUTE_HANDLER) {
                    SetLastError (ERROR_BAD_ARGUMENTS);
                    fRet = FALSE;
                }
                pStore->Unlock ();

            } else {

                // The store no longer exists so the handle does not need to be
                // removed from any lists. Just delete the handle structure.
                fRet = TRUE;
            }

        } else {

            // This is a store handle, remove from the global
            // current open handle list.
            fRet = DeleteHandleFromList (&g_pRootHandle, pStoreHandle);
        }

    } __except (EXCEPTION_EXECUTE_HANDLER) {
        SetLastError (ERROR_BAD_ARGUMENTS);
        fRet = FALSE;
    }
    UnlockStoreMgr ();

    if (fRet) {
        // Cleanup handle strucure on success.
        delete pStoreHandle;
    }

    return fRet;
}    

BOOL WINAPI STG_GetStoreInfo(PSTOREHANDLE pStoreHandle, PSTOREINFO pInfo)
{
    DWORD dwError = ERROR_SUCCESS;
    DEBUGMSG( ZONE_STOREAPI, (L"FSDMGR:STG_GetStoreInfo(0x%08X)\r\n", pStoreHandle));

    __try {
        if (pInfo->cbSize == sizeof(STOREINFO)) {
            if (IsValidHandle(pStoreHandle)) {
                if (!pStoreHandle->pStore->GetStoreInfo( pInfo)) {
                    dwError = ERROR_GEN_FAILURE;
                }    
            } else {
                dwError = ERROR_BAD_ARGUMENTS;
            }
        } else {
            dwError = ERROR_BAD_ARGUMENTS;
        }   
    } __except( EXCEPTION_EXECUTE_HANDLER) {
        dwError = ERROR_BAD_ARGUMENTS;
    }
    if (dwError != ERROR_SUCCESS) {
        SetLastError(dwError);
    }    
    return (dwError == ERROR_SUCCESS);
}

// TODO: Privilege check.
BOOL WINAPI STG_DismountStore(PSTOREHANDLE pStoreHandle)
{
    DWORD dwError = ERROR_SUCCESS;
    DEBUGMSG( ZONE_STOREAPI, (L"FSDMGR:STG_DismountStore(0x%08X)\r\n", pStoreHandle));

    __try {    
        if (IsValidHandle(pStoreHandle)) {
            StoreDisk_t *pStore = pStoreHandle->pStore;
            pStore->Lock();
            if (!pStore->UnmountStore(FALSE)) {
                dwError = ERROR_GEN_FAILURE;
            }    
            pStore->Unlock();
        } else {
            dwError = ERROR_BAD_ARGUMENTS;
        }
    } __except( EXCEPTION_EXECUTE_HANDLER) {
        dwError = ERROR_BAD_ARGUMENTS;
    }
    if (dwError != ERROR_SUCCESS) {
        SetLastError(dwError);
    }    
    return (dwError == ERROR_SUCCESS);
}

// TODO: Privilege check.
BOOL WINAPI STG_FormatStore(PSTOREHANDLE pStoreHandle)
{
    DWORD dwError = ERROR_SUCCESS;
    DEBUGMSG( ZONE_STOREAPI, (L"FSDMGR:STG_FormatStore(0x%08X)\r\n", pStoreHandle));

    __try {    
        if (IsValidHandle(pStoreHandle)) {
            dwError = pStoreHandle->pStore->FormatStore();
        } else {
            dwError = ERROR_BAD_ARGUMENTS;
        }
    } __except( EXCEPTION_EXECUTE_HANDLER) {
        dwError = ERROR_BAD_ARGUMENTS;
    }
    if (dwError != ERROR_SUCCESS) {
        SetLastError(dwError);
    }    
    return (dwError == ERROR_SUCCESS);
}

// TODO: Privilege check.
BOOL WINAPI STG_CreatePartition(PSTOREHANDLE pStoreHandle, LPCTSTR szPartitionName, DWORD dwPartType, DWORD dwHighSec, DWORD dwLowSec, BOOL bAuto)
{
    DWORD dwError = ERROR_SUCCESS;
    SECTORNUM snNumSectors = ((SECTORNUM)dwHighSec << 32) | dwLowSec;
    DEBUGMSG( ZONE_STOREAPI, (L"FSDMGR:STG_CreatePartition(0x%08X) %s PartType=%ld %ld(0x%08X%08X) Auto=%s\r\n",
              pStoreHandle,
              szPartitionName,
              dwPartType,
              dwLowSec,
              (DWORD)(snNumSectors >> 32),
              (DWORD)snNumSectors,
              bAuto ? L"TRUE" : L"FALSE"));
    
    __try {
        if (IsValidHandle(pStoreHandle)) {
            dwError = pStoreHandle->pStore->CreatePartition( szPartitionName, (BYTE)dwPartType, snNumSectors, bAuto);
        } else {
            dwError = ERROR_BAD_ARGUMENTS;
        }
    } __except( EXCEPTION_EXECUTE_HANDLER) {
        dwError = ERROR_BAD_ARGUMENTS;
    }
    if (dwError != ERROR_SUCCESS) {
        SetLastError(dwError);
    }    
    return (dwError == ERROR_SUCCESS);
}

// TODO: Privilege check.
BOOL WINAPI STG_DeletePartition(PSTOREHANDLE pStoreHandle, LPCTSTR szPartitionName)
{
    DWORD dwError = ERROR_SUCCESS;
    DEBUGMSG( ZONE_STOREAPI, (L"FSDMGR:STG_DeletePartition(0x%08X) Name=%s\r\n", pStoreHandle,szPartitionName));

    __try {        
        if (IsValidHandle(pStoreHandle)) {
            dwError = pStoreHandle->pStore->DeletePartition( szPartitionName);
        } else {
            dwError = ERROR_BAD_ARGUMENTS;
        }
    } __except( EXCEPTION_EXECUTE_HANDLER) {
        dwError = ERROR_BAD_ARGUMENTS;
    }
    if (dwError != ERROR_SUCCESS) {
        SetLastError(dwError);
    }    
    return (dwError == ERROR_SUCCESS);
}

HANDLE WINAPI STGINT_OpenPartition(PSTOREHANDLE pStoreHandle, LPCTSTR pszPartitionName)
{
    DWORD dwError = ERROR_SUCCESS;
    DEBUGMSG( ZONE_STOREAPI, (L"FSDMGR:STG_OpenPartition(0x%08X) Name=%s\r\n", pStoreHandle,pszPartitionName));
    HANDLE hPartition = INVALID_HANDLE_VALUE;
    
    __try {                
        if (IsValidHandle(pStoreHandle)) {
            dwError = pStoreHandle->pStore->OpenPartition( pszPartitionName, &hPartition, pStoreHandle->hProc);
        } else {
            dwError = ERROR_BAD_ARGUMENTS;
        }        
    } __except( EXCEPTION_EXECUTE_HANDLER) {
        dwError = ERROR_BAD_ARGUMENTS;
    }

    if (dwError != ERROR_SUCCESS) {
        SetLastError(dwError);
    }    
    return hPartition;
}

#ifdef UNDER_CE
HANDLE WINAPI STGEXT_OpenPartition(PSTOREHANDLE pStoreHandle, LPCTSTR pszPartitionName)
{
    DWORD dwError = ERROR_SUCCESS;
    HANDLE hPartition = INVALID_HANDLE_VALUE;
    TCHAR szLocalName[PARTITIONNAMESIZE];

    __try {            
            // make this call inside the exception handler in case szPartitionName inaccessible
            size_t cchLen;
            if (FAILED(StringCchLength(pszPartitionName, PARTITIONNAMESIZE, &cchLen))) {
                dwError = ERROR_INVALID_PARAMETER;
                goto done;
            }
        
            // make a local copy of the name            
            if (FAILED(StringCchCopyN(szLocalName, PARTITIONNAMESIZE, pszPartitionName, cchLen + 1))) {
                dwError = ERROR_INVALID_PARAMETER;
                goto done;
            }
        
            pszPartitionName = szLocalName;

    } __except (EXCEPTION_EXECUTE_HANDLER) {
        dwError = ERROR_BAD_ARGUMENTS;
        goto done;
    }

    // Invoke internal OpenPartition API with copied parameter.
    hPartition = STGINT_OpenPartition (pStoreHandle, pszPartitionName);
    if (INVALID_HANDLE_VALUE != hPartition) {
        if (!FsdDuplicateHandle((HANDLE)GetCurrentProcessId(), hPartition,
                            reinterpret_cast<HANDLE> (GetCallerVMProcessId ()), 
                            &hPartition, 0, FALSE,
                            DUPLICATE_SAME_ACCESS | DUPLICATE_CLOSE_SOURCE)) {
            dwError = FsdGetLastError (ERROR_OUTOFMEMORY);
            DEBUGCHK(0);
        }
    }

done:
    if (dwError != ERROR_SUCCESS) {
        SetLastError(dwError);
    }    
    return hPartition;
}
#endif

// TODO: Privilege check.
BOOL WINAPI STG_MountPartition(PSTOREHANDLE pStoreHandle)
{
    DWORD dwError = ERROR_SUCCESS;
    DEBUGMSG( ZONE_STOREAPI, (L"FSDMGR:STG_MountPartition(0x%08X)\r\n", pStoreHandle));

    __try {
        if (IsValidHandle(pStoreHandle)) {
            dwError = pStoreHandle->pStore->MountPartition( pStoreHandle->pPartition);
        } else {
            dwError = ERROR_BAD_ARGUMENTS;
        }
    } __except( EXCEPTION_EXECUTE_HANDLER) {
        dwError = ERROR_BAD_ARGUMENTS;
    }
    if (dwError != ERROR_SUCCESS) {
        SetLastError(dwError);
    }    
    return (dwError == ERROR_SUCCESS);
}

// TODO: Privilege check.
BOOL WINAPI STG_DismountPartition(PSTOREHANDLE pStoreHandle)
{
    DWORD dwError = ERROR_SUCCESS;
    DEBUGMSG( ZONE_STOREAPI, (L"FSDMGR:STG_DismountPartition(0x%08X)\r\n", pStoreHandle));

    __try {
        if (IsValidHandle(pStoreHandle)) {
            dwError = pStoreHandle->pStore->UnmountPartition( pStoreHandle->pPartition);
        } else {
            dwError = ERROR_BAD_ARGUMENTS;
        }
    } __except( EXCEPTION_EXECUTE_HANDLER) {
        dwError = ERROR_BAD_ARGUMENTS;
    }
    if (dwError != ERROR_SUCCESS) {
        SetLastError(dwError);
    }    
    return (dwError == ERROR_SUCCESS);
}

// TODO: Privilege check.
BOOL WINAPI STG_RenamePartition(PSTOREHANDLE pStoreHandle, LPCTSTR szNewName)
{
    DWORD dwError = ERROR_SUCCESS;
    DEBUGMSG( ZONE_STOREAPI, (L"FSDMGR:STG_RenamePartition(0x%08X) Name=%s\r\n", pStoreHandle, szNewName));

    __try {
        if (IsValidHandle(pStoreHandle)) {
            dwError = pStoreHandle->pStore->RenameParttion(pStoreHandle->pPartition, szNewName);
        } else {
            dwError = ERROR_BAD_ARGUMENTS;
        }
    } __except( EXCEPTION_EXECUTE_HANDLER) {
        dwError = ERROR_BAD_ARGUMENTS;
    }
    if (dwError != ERROR_SUCCESS) {
        SetLastError(dwError);
    }    
    return (dwError == ERROR_SUCCESS);
}


// TODO: Privilege check.
BOOL WINAPI STG_SetPartitionAttributes(PSTOREHANDLE pStoreHandle, DWORD dwAttrs)
{
    DWORD dwError = ERROR_SUCCESS;
    DEBUGMSG( ZONE_STOREAPI, (L"FSDMGR:STG_SetPartitionAttributes(0x%08X) Attrs=%08X\r\n", pStoreHandle, dwAttrs));

    __try {
        if (IsValidHandle(pStoreHandle)) {
            dwError = pStoreHandle->pStore->SetPartitionAttributes(pStoreHandle->pPartition, dwAttrs);
        } else {
            dwError = ERROR_BAD_ARGUMENTS;
        }
    } __except( EXCEPTION_EXECUTE_HANDLER) {
        dwError = ERROR_BAD_ARGUMENTS;
    }
    if (dwError != ERROR_SUCCESS) {
        SetLastError(dwError);
    }    
    return (dwError == ERROR_SUCCESS);
}

BOOL WINAPI STG_DeviceIoControl(PSTOREHANDLE pStoreHandle, DWORD dwIoControlCode, PVOID pInBuf, DWORD nInBufSize, PVOID pOutBuf, DWORD nOutBufSize, PDWORD pBytesReturned, OVERLAPPED *pOverlapped)
{
    PVOID pInBufOrig = pInBuf;
    PBYTE PtrBackup[MAX_SG_BUF];
    LRESULT lResult;

    BOOL fTrustedCaller = (GetDirectCallerProcessId() == GetCurrentProcessId());

    if (!IsValidHandle(pStoreHandle) ||
        (STOREHANDLE_TYPE_SEARCH & pStoreHandle->dwFlags))
    {
        // Caller passed an invalid store handle.
        lResult = ERROR_INVALID_PARAMETER;
        goto exit_ioctl;
    }

    if (!fTrustedCaller)
    {
        // For untrusted callers, copy and validate access to the embedded pointers in
        // SG_REQ and CDROM_READ structures.
        //
        // SECURITY NOTE: Any IOCTLs with embedded pointers that we're not aware of and
        // don't validate here need to be marshalled by the partition driver.
        //
        switch (dwIoControlCode)
        {
            case IOCTL_DISK_WRITE:
            case DISK_IOCTL_WRITE:
                lResult = CeOpenSGRequest ((PSG_REQ*)&pInBuf, (SG_REQ*)pInBufOrig, nInBufSize, ARG_I_PTR, PtrBackup, MAX_SG_BUF);
                if (ERROR_SUCCESS != lResult)
                {
                    goto exit_ioctl;
                }
                break;

            case IOCTL_DISK_READ:
            case DISK_IOCTL_READ:
                lResult = CeOpenSGRequest ((PSG_REQ*)&pInBuf, (SG_REQ*)pInBufOrig, nInBufSize, ARG_O_PTR, PtrBackup, MAX_SG_BUF);
                if (ERROR_SUCCESS != lResult)
                {
                    goto exit_ioctl;
                }
                break;

            case IOCTL_CDROM_READ_SG:
                lResult = CeOpenSGXRequest ((PCDROM_READ*)&pInBuf, (CDROM_READ*)pInBufOrig, nInBufSize, ARG_O_PTR, PtrBackup, MAX_SG_BUF);
                if (ERROR_SUCCESS != lResult)
                {
                    goto exit_ioctl;
                }
                break;
        }
    }

    // Allow a few IOCTLs that retrieve only cached info and behave the same regardless of
    // handle type (store or partition).
    if (IOCTL_DISK_DEVICE_INFO == dwIoControlCode)
    {
        // handle IOCTL_DISK_DEVICE_INFO without calling into the store or partition IOCTL handler
        if (!pInBuf || (nInBufSize < sizeof(STORAGEDEVICEINFO)))
        {
            lResult = ERROR_INVALID_PARAMETER;
        }
        else
        {
            __try
            {
                lResult = pStoreHandle->pStore->GetDeviceInfo((STORAGEDEVICEINFO*)pInBuf, pBytesReturned);
            }
            __except(EXCEPTION_EXECUTE_HANDLER)
            {
                lResult = ERROR_INVALID_PARAMETER;
            }
        }
    }
    else if (IOCTL_DISK_GET_STORAGEID == dwIoControlCode)
    {
        // handle IOCTL_DISK_GET_STORAGEID without calling into the store or partition IOCTL handler
        if (!pOutBuf || (nOutBufSize < sizeof(STORAGE_IDENTIFICATION)))
        {
            lResult = ERROR_INVALID_PARAMETER;
        }
        else
        {
            __try
            {
                // initialize the size to zero to indicate that the operation 
                // should not be attempted a second time if it fails.
                ((STORAGE_IDENTIFICATION*)pOutBuf)->dwSize = 0;
                lResult = pStoreHandle->pStore->GetStorageId(pOutBuf, nOutBufSize, pBytesReturned);
            }
            __except(EXCEPTION_EXECUTE_HANDLER)
            {
                lResult = ERROR_INVALID_PARAMETER;
            }
        }

    }
    else
    {
        __try
        {
            lResult = pStoreHandle->pStore->StoreIoControl(pStoreHandle->pPartition, dwIoControlCode, pInBuf, nInBufSize, pOutBuf, nOutBufSize, pBytesReturned);
        }
        __except(EXCEPTION_EXECUTE_HANDLER)
        {
            lResult = ERROR_INVALID_PARAMETER;
        }
    }

    if (!fTrustedCaller)
    {
        switch (dwIoControlCode)
        {
            LRESULT TempResult;
            case IOCTL_DISK_WRITE:
            case DISK_IOCTL_WRITE:
                TempResult = CeCloseSGRequest ((SG_REQ*)pInBuf, (SG_REQ*)pInBufOrig, nInBufSize, ARG_I_PTR, PtrBackup, MAX_SG_BUF);
                DEBUGCHK (ERROR_SUCCESS == TempResult);
                break;

            case IOCTL_DISK_READ:
            case DISK_IOCTL_READ:
                TempResult = CeCloseSGRequest ((SG_REQ*)pInBuf, (SG_REQ*)pInBufOrig, nInBufSize, ARG_O_PTR, PtrBackup, MAX_SG_BUF);
                DEBUGCHK (ERROR_SUCCESS == TempResult);
                break;

            case IOCTL_CDROM_READ_SG:
                TempResult = CeCloseSGXRequest ((CDROM_READ*)pInBuf, (CDROM_READ*)pInBufOrig, nInBufSize, ARG_O_PTR, PtrBackup, MAX_SG_BUF);
                DEBUGCHK (ERROR_SUCCESS == TempResult);
                break;
        }
    }

exit_ioctl:
    if (ERROR_SUCCESS != lResult)
    {
        SetLastError (lResult);
    }
    return (ERROR_SUCCESS == lResult);
}

BOOL WINAPI STG_GetPartitionInfo(PSTOREHANDLE pStoreHandle, PPARTINFO pInfo)
{
    DWORD dwError = ERROR_SUCCESS;
    DEBUGMSG( ZONE_STOREAPI, (L"FSDMGR:STG_GetPartitionInfo(0x%08X)\r\n", pStoreHandle));

    __try {    
        if (pInfo->cbSize == sizeof(PARTINFO)) {
            if (IsValidHandle(pStoreHandle)) {
                dwError = pStoreHandle->pStore->GetPartitionInfo(pStoreHandle->pPartition, pInfo);
            } else {
                dwError = ERROR_BAD_ARGUMENTS;
            }
        } else {
            dwError = ERROR_BAD_ARGUMENTS;
        }   
    } __except( EXCEPTION_EXECUTE_HANDLER) {
        dwError = ERROR_BAD_ARGUMENTS;
    }
    if (dwError != ERROR_SUCCESS) {
        SetLastError(dwError);
    }
    return (dwError == ERROR_SUCCESS);
}


// TODO: Privilege check.
BOOL WINAPI STG_FormatPartition(PSTOREHANDLE pStoreHandle, DWORD bPartType, BOOL bAuto)
{
    DWORD dwError = ERROR_SUCCESS;
    DEBUGMSG( ZONE_STOREAPI, (L"FSDMGR:STG_FormatPartition(0x%08X) PartType=%ld Auto=%s\r\n", pStoreHandle, bPartType, bAuto ? L"TRUE" : L"FALSE"));

    __try {
        if (IsValidHandle(pStoreHandle)) {
            dwError = pStoreHandle->pStore->FormatPartition(pStoreHandle->pPartition, (BYTE)bPartType, bAuto);
        } else {
            dwError = ERROR_BAD_ARGUMENTS;
        }
        if (dwError != ERROR_SUCCESS) {
            SetLastError(dwError);
        }    
    } __except( EXCEPTION_EXECUTE_HANDLER) {
        dwError = ERROR_BAD_ARGUMENTS;
    }
    return (dwError == ERROR_SUCCESS);
}

HANDLE WINAPI STGINT_FindFirstPartition(PSTOREHANDLE pStoreHandle, PPARTINFO pInfo)
{
    DWORD dwError = ERROR_SUCCESS;
    DEBUGMSG( ZONE_STOREAPI, (L"FSDMGR:STG_FindFirstPartition(0x%08X)\r\n", pStoreHandle));
    HANDLE hSearch = INVALID_HANDLE_VALUE;

    __try {
        if (pInfo->cbSize == sizeof(PARTINFO)) {
            if (IsValidHandle(pStoreHandle)) {
                dwError = pStoreHandle->pStore->FindFirstPartition(pInfo, &hSearch, pStoreHandle->hProc);
            } else {
                dwError = ERROR_BAD_ARGUMENTS;
            }
        } else {
            dwError = ERROR_BAD_ARGUMENTS;
        }   
    } __except( EXCEPTION_EXECUTE_HANDLER) {
        dwError = ERROR_BAD_ARGUMENTS;
    }
    if (dwError != ERROR_SUCCESS) {
        SetLastError(dwError);
    }    
    return hSearch;
}

#ifdef UNDER_CE
HANDLE WINAPI STGEXT_FindFirstPartition(PSTOREHANDLE pStoreHandle, PPARTINFO pInfo)
{
    HANDLE h = STGINT_FindFirstPartition (pStoreHandle, pInfo);
    if (INVALID_HANDLE_VALUE != h) {
        if (FsdDuplicateHandle((HANDLE)GetCurrentProcessId(), h,
                            reinterpret_cast<HANDLE> (GetCallerVMProcessId ()), 
                            &h, 0, FALSE,
                            DUPLICATE_SAME_ACCESS | DUPLICATE_CLOSE_SOURCE)) {
            return h;
        }
        DEBUGCHK(0);
    }
    return INVALID_HANDLE_VALUE;
}
#endif

BOOL WINAPI STG_FindNextPartition(SEARCHPARTITION *pSearch, PPARTINFO pInfo, DWORD SizeOfInfo)
{
#ifdef UNDER_CE
    if (sizeof (PARTINFO) != SizeOfInfo) {
        DEBUGCHK (0); // FindNextFileW_Trap macro was called directly w/out proper size.
        SetLastError (ERROR_INVALID_PARAMETER);
        return FALSE;
    }
#endif

    DWORD dwError = ERROR_SUCCESS;
    DEBUGMSG( ZONE_STOREAPI, (L"FSDMGR:STG_FindNextPartition(0x%08X)\r\n", pSearch));

    __try {
        if (pInfo->cbSize == sizeof(PARTINFO)) {
            if (IsValidHandle(pSearch)) {
                dwError = pSearch->pStore->FindNextPartition(pSearch, pInfo);
            } else {
                dwError = ERROR_BAD_ARGUMENTS;
            }
        } else {
            dwError = ERROR_BAD_ARGUMENTS;
        }   
    } __except( EXCEPTION_EXECUTE_HANDLER) {
        dwError = ERROR_BAD_ARGUMENTS;
    }
    if (dwError != ERROR_SUCCESS) {
        SetLastError(dwError);
    }    
    return (dwError == ERROR_SUCCESS);
}

BOOL WINAPI STG_FindClosePartition(SEARCHPARTITION *pSearch)
{
    DWORD dwError = ERROR_SUCCESS;
    DEBUGMSG( ZONE_STOREAPI, (L"FSDMGR:STG_FindClosePartition(0x%08X)\r\n", pSearch));
    __try {
        if (IsValidHandle(pSearch)) {
            dwError = pSearch->pStore->FindClosePartition(pSearch);
        } else {
            dwError = ERROR_BAD_ARGUMENTS;
        }
    } __except( EXCEPTION_EXECUTE_HANDLER) {
        dwError = ERROR_BAD_ARGUMENTS;
    }
    if (dwError != ERROR_SUCCESS) {
        SetLastError(dwError);
    }
    return (ERROR_SUCCESS == dwError);
}

#ifndef UNDER_CE
BOOL WINAPI STG_SetPartitionSize(PSTOREHANDLE pStoreHandle, DWORD dwHighSec, DWORD dwLowSec)
{
    DWORD dwError = ERROR_SUCCESS;
    SECTORNUM snNumSectors = ((SECTORNUM)dwHighSec << 32) | dwLowSec;
    DEBUGMSG( ZONE_STOREAPI, (L"FSDMGR:STG_SetPartitionSize(0x%08X) %ld(0x%08X%08X)\r\n",
        pStoreHandle, dwLowSec, (DWORD)(snNumSectors >> 32), (DWORD)snNumSectors));

    __try {
        if (IsValidHandle(pStoreHandle)) {
            dwError = pStoreHandle->pStore->SetPartitionSize( pStoreHandle->pPartition, snNumSectors);
        } else {
            dwError = ERROR_BAD_ARGUMENTS;
        }
    } __except( EXCEPTION_EXECUTE_HANDLER) {
        dwError = ERROR_BAD_ARGUMENTS;
    }
    if (dwError != ERROR_SUCCESS) {
        SetLastError(dwError);
    }    
    return (dwError == ERROR_SUCCESS);
}
#endif // !UNDER_CE

#ifdef __cplusplus
}
#endif /* __cplusplus */

