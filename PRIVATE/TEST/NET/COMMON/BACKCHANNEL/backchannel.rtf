{\rtf1\ansi\ansicpg1252\uc1\deff0\stshfdbch0\stshfloch0\stshfhich0\stshfbi0\deflang1033\deflangfe1033{\fonttbl{\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}{\f49\froman\fcharset238\fprq2 Times New Roman CE;}{\f50\froman\fcharset204\fprq2 Times New Roman Cyr;}{\f52\froman\fcharset161\fprq2 Times New Roman Greek;}
{\f53\froman\fcharset162\fprq2 Times New Roman Tur;}{\f54\froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\f55\froman\fcharset178\fprq2 Times New Roman (Arabic);}{\f56\froman\fcharset186\fprq2 Times New Roman Baltic;}
{\f57\froman\fcharset163\fprq2 Times New Roman (Vietnamese);}{\f59\fswiss\fcharset238\fprq2 Arial CE;}{\f60\fswiss\fcharset204\fprq2 Arial Cyr;}{\f62\fswiss\fcharset161\fprq2 Arial Greek;}{\f63\fswiss\fcharset162\fprq2 Arial Tur;}
{\f64\fswiss\fcharset177\fprq2 Arial (Hebrew);}{\f65\fswiss\fcharset178\fprq2 Arial (Arabic);}{\f66\fswiss\fcharset186\fprq2 Arial Baltic;}{\f67\fswiss\fcharset163\fprq2 Arial (Vietnamese);}{\f69\fmodern\fcharset238\fprq1 Courier New CE;}
{\f70\fmodern\fcharset204\fprq1 Courier New Cyr;}{\f72\fmodern\fcharset161\fprq1 Courier New Greek;}{\f73\fmodern\fcharset162\fprq1 Courier New Tur;}{\f74\fmodern\fcharset177\fprq1 Courier New (Hebrew);}
{\f75\fmodern\fcharset178\fprq1 Courier New (Arabic);}{\f76\fmodern\fcharset186\fprq1 Courier New Baltic;}{\f77\fmodern\fcharset163\fprq1 Courier New (Vietnamese);}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;
\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;
\red128\green128\blue128;\red192\green192\blue192;}{\stylesheet{\ql \li0\ri0\sa160\sl240\slmult0\nowidctlpar\faauto\rin0\lin0\itap0 \fs21\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \snext0 Normal;}{\s1\ql \li-1800\ri0\sb200\sa80\sl-440\slmult0
\keepn\nowidctlpar\faauto\outlinelevel0\rin0\lin-1800\itap0 \b\fs40\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext0 heading 1;}{\s2\ql \li-1800\ri0\sb140\sa60\sl-380\slmult0\keepn\nowidctlpar\faauto\outlinelevel1\rin0\lin-1800\itap0 
\b\fs34\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext0 heading 2;}{\s3\ql \li0\ri0\sb80\sa40\sl-340\slmult0\keepn\nowidctlpar\faauto\outlinelevel2\rin0\lin0\itap0 \b\f1\fs30\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 
\sbasedon0 \snext0 heading 3;}{\s4\ql \li0\ri0\sb60\sa40\sl-280\slmult0\keepn\nowidctlpar\faauto\outlinelevel3\rin0\lin0\itap0 \b\f1\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext0 heading 4;}{\*\cs10 \additive \ssemihidden 
Default Paragraph Font;}{\*\ts11\tsrowd\trftsWidthB3\trpaddl108\trpaddr108\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3\tscellwidthfts0\tsvertalt\tsbrdrt\tsbrdrl\tsbrdrb\tsbrdrr\tsbrdrdgl\tsbrdrdgr\tsbrdrh\tsbrdrv 
\ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs20\lang1024\langfe1024\cgrid\langnp1024\langfenp1024 \snext11 \ssemihidden Normal Table;}{\s15\ql \li-1800\ri0\sl-210\slmult0\nowidctlpar\tqr\tx6960\faauto\rin0\lin-1800\itap0 
\b\f1\fs19\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext15 header;}{\s16\ql \li0\ri0\sl-220\slmult0\nowidctlpar\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800\faauto\rin0\lin0\itap0 
\f2\fs16\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \snext16 Ex;}{\s17\ql \li-1770\ri30\sb50\sl-80\slmult0\nowidctlpar\brdrt\brdrs\brdrw15\brdrcf2 \faauto\rin30\lin-1770\itap0 \fs12\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \snext17 
header rule;}{\s18\ql \li-1800\ri0\sa180\sl-440\slmult0\keepn\nowidctlpar\tx0\faauto\rin0\lin-1800\itap0 \b\f1\fs40\up8\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \snext18 Rh1;}{\s19\ql \li0\ri0\sb20\sl-220\slmult0
\keepn\nowidctlpar\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240\faauto\rin0\lin0\itap0 \b\f1\fs21\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \snext19 Rmh;}{\s20\ql \li0\ri0\sl-240\slmult0\keepn\nowidctlpar\faauto\rin0\lin0\itap0 
\fs21\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \snext20 Term1;}{\s21\ql \li280\ri0\sl-240\slmult0\keepn\nowidctlpar\faauto\rin0\lin280\itap0 \fs21\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \snext21 Term2;}{
\s22\ql \li280\ri0\sa80\sl-240\slmult0\nowidctlpar\faauto\rin0\lin280\itap0 \fs21\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \snext22 Def1;}{\s23\ql \li560\ri0\sa80\sl-240\slmult0\nowidctlpar\faauto\rin0\lin560\itap0 
\fs21\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \snext23 Def2;}{\s24\ql \li-1770\ri30\sb280\sa250\sl-120\slmult0\keepn\nowidctlpar\brdrb\brdrs\brdrw15\brdrcf2 \faauto\rin30\lin-1770\itap0 \fs8\cf8\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 
\snext24 Rule;}{\s25\ql \li0\ri0\sa80\widctlpar\intbl\faauto\rin0\lin0 \fs21\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 \sbasedon0 \snext25 Table Text;}}{\*\latentstyles\lsdstimax156\lsdlockeddef0}{\*\rsidtbl \rsid602640\rsid5786484
\rsid9242689}{\*\generator Microsoft Word 11.0.6502;}{\info{\author Corey Burke}{\operator Corey Burke}{\creatim\yr2005\mo8\dy15\hr20\min46}{\revtim\yr2005\mo8\dy15\hr20\min47}{\version3}{\edmins1}{\nofpages7}{\nofwords1327}{\nofchars7570}
{\*\company Microsoft Corporation}{\nofcharsws8880}{\vern24579}}\margl3330\margr1530\margt-2540\margb-2220\gutter420 \facingp\deftab280\widowctrl\ftnbj\aenddoc\noxlattoyen\expshrtn\noultrlspc\dntblnsbdb\nospaceforul\hyphcaps0\horzdoc\dghspace120
\dgvspace120\dghorigin1701\dgvorigin1984\dghshow0\dgvshow3\jcompress\viewkind1\viewscale100\nolnhtadjtbl\rsidroot9242689 \fet0{\*\ftnsep \pard\plain \ql \li0\ri0\sa160\sl240\slmult0\nowidctlpar\faauto\rin0\lin0\itap0 
\fs21\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid5786484 \chftnsep 
\par }}{\*\ftnsepc \pard\plain \ql \li0\ri0\sa160\sl240\slmult0\nowidctlpar\faauto\rin0\lin0\itap0 \fs21\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid5786484 \chftnsepc 
\par }}{\*\aftnsep \pard\plain \ql \li0\ri0\sa160\sl240\slmult0\nowidctlpar\faauto\rin0\lin0\itap0 \fs21\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid5786484 \chftnsep 
\par }}{\*\aftnsepc \pard\plain \ql \li0\ri0\sa160\sl240\slmult0\nowidctlpar\faauto\rin0\lin0\itap0 \fs21\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid5786484 \chftnsepc 
\par }}\sectd \binfsxn1\binsxn1\linex0\headery1990\footery360\endnhere\titlepg\sectdefaultcl\sftnbj {\headerl \pard\plain \s15\ql \li-1800\ri0\sl-210\slmult0\widctlpar\tqr\tx6960\faauto\rin0\lin-1800\itap0 
\b\f1\fs19\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\field{\*\fldinst {\insrsid5786484 PAGE}}{\fldrslt {\lang1024\langfe1024\noproof\insrsid5786484 6}}}{\expnd50\expndtw250\insrsid5786484  }{\insrsid5786484 Autodoc Output - 06/24/05
\par }\pard\plain \s17\ql \li-1770\ri30\sb50\sl-80\slmult0\widctlpar\brdrt\brdrs\brdrw15\brdrcf2 \faauto\rin30\lin-1770\itap0 \fs12\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid5786484 
\par }}{\headerr \pard\plain \s15\ql \li-1800\ri0\sl-210\slmult0\widctlpar\tqr\tx6960\faauto\rin0\lin-1800\itap0 \b\f1\fs19\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid5786484 \tab Autodoc Output - 06/24/05}{\expnd50\expndtw250\insrsid5786484   
}{\field{\*\fldinst {\insrsid5786484 PAGE}}{\fldrslt {\lang1024\langfe1024\noproof\insrsid5786484 5}}}{\insrsid5786484 
\par }\pard\plain \s17\ql \li-1770\ri30\sb50\sl-80\slmult0\widctlpar\brdrt\brdrs\brdrw15\brdrcf2 \faauto\rin30\lin-1770\itap0 \fs12\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid5786484 
\par }}{\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang {\pntxta )}}
{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl8
\pnlcltr\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}\pard\plain \s24\ql \li-1770\ri30\sb280\sa250\sl-120\slmult0\keepn\widctlpar\brdrb\brdrs\brdrw15\brdrcf2 
\faauto\rin30\lin-1770\itap0 \fs8\cf8\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid5786484 
\par }\pard\plain \s1\ql \li-1800\ri0\sb200\sa80\sl-440\slmult0\keepn\widctlpar\faauto\outlinelevel0\rin0\lin-1800\itap0 \b\fs40\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid5786484 
Module BackChannel - A generic way to invoke commands across processes or machines.
\par }\pard\plain \ql \li0\ri0\sa160\sl240\slmult0\widctlpar\faauto\rin0\lin0\itap0 \fs21\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid5786484 Filename: PRIVATE/TEST/NET/COMMON/BACKCHANNEL/BACKCHANNEL.CPP
\par }\pard\plain \s19\ql \li0\ri0\sb20\sl-220\slmult0\keepn\widctlpar\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240\faauto\rin0\lin0\itap0 \b\f1\fs21\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid5786484 Description
\par }\pard\plain \ql \li0\ri0\sa160\sl240\slmult0\widctlpar\faauto\rin0\lin0\itap0 \fs21\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid5786484 
Quite often developers need to invoke actions in another process or pass data between them.  This is especially true when testing components using the client/server model
 where the test app needs to control the server side.  This library handles the socket-level code that transfers the data back and forth for both the client and the server.
\par First a BackChannel service is started with BackChannel_StartService.  Clients then
 connect to the listening BackChannel service, invoke operations using BackChannel_SendCommand, and then get the results from BackChannel_GetResult.  Finally clients disconnect from the BackChannel service with BackChannel_Disconnect.
\par The BackChannel servi
ce registers a table of functions along with command numbers.  The client can invoke those functions via the command numbers and pass in binary data.  The command functions return a DWORD result as well as an arbitrary amount of binary data.  The client a
nd server need to be kept in sync to avoid versioning issues.
\par See the bcex sample for more detailed examples.
\par \line Link:    backchannel.lib \line Include: backchannel.h
\par }\pard\plain \s19\ql \li0\ri0\sb20\sl-220\slmult0\keepn\widctlpar\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240\faauto\rin0\lin0\itap0 \b\f1\fs21\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid5786484 See Also
\par }\pard\plain \ql \li0\ri0\sa160\sl240\slmult0\widctlpar\faauto\rin0\lin0\itap0 \fs21\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\b\insrsid5786484 BackChannel_ConnectEx}{\insrsid5786484 
\par }{\b\insrsid5786484 BackChannel_SendCommand}{\insrsid5786484 
\par }{\b\insrsid5786484 BackChannel_GetResult}{\insrsid5786484 
\par }{\b\insrsid5786484 BackChannel_Disconnect}{\insrsid5786484 
\par }{\b\insrsid5786484 BackChannel_StartService}{\insrsid5786484 
\par }\pard\plain \s24\ql \li-1770\ri30\sb280\sa250\sl-120\slmult0\keepn\widctlpar\brdrb\brdrs\brdrw15\brdrcf2 \faauto\rin30\lin-1770\itap0 \fs8\cf8\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid5786484 
\par }\pard\plain \s1\ql \li-1800\ri0\sb200\sa80\sl-440\slmult0\keepn\widctlpar\faauto\outlinelevel0\rin0\lin-1800\itap0 \b\fs40\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid5786484 BackChannel_ConnectEx
\par }\pard\plain \ql \li0\ri0\sa160\sl240\slmult0\widctlpar\faauto\rin0\lin0\itap0 \fs21\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\b\insrsid5786484 SOCKET}{\insrsid5786484  }{\b\insrsid5786484 BackChannel_ConnectEx(IN LPSTR}{\insrsid5786484  }{
\i\insrsid5786484 szServer}{\b\insrsid5786484 , IN LPSTR}{\insrsid5786484  }{\i\insrsid5786484 szPort}{\b\insrsid5786484 , IN int}{\insrsid5786484  }{\i\insrsid5786484 iFamily}{\b\insrsid5786484 ) }{\insrsid5786484 
\par Forms a connection to a BackChannel service.
\par Defined in: PRIVATE/TEST/NET/COMMON/BACKCHANNEL/BACKCHANNEL.CPP
\par }\pard\plain \s19\ql \li0\ri0\sb20\sl-220\slmult0\keepn\widctlpar\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240\faauto\rin0\lin0\itap0 \b\f1\fs21\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid5786484 Return Value
\par }\pard\plain \ql \li0\ri0\sa160\sl240\slmult0\widctlpar\faauto\rin0\lin0\itap0 \fs21\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid5786484 Returns a SOCKET for the command channel connection that should be used in future calls.
\par }\pard\plain \s19\ql \li0\ri0\sb20\sl-220\slmult0\keepn\widctlpar\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240\faauto\rin0\lin0\itap0 \b\f1\fs21\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid5786484 Parameters
\par }\pard\plain \s20\ql \li0\ri0\sl-240\slmult0\keepn\widctlpar\faauto\rin0\lin0\itap0 \fs21\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\i\insrsid5786484 szServer}{\insrsid5786484 
\par }\pard\plain \s22\ql \li280\ri0\sa80\sl-240\slmult0\widctlpar\faauto\rin0\lin280\itap0 \fs21\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid5786484 Name or address of the server to connect to
\par }\pard\plain \s20\ql \li0\ri0\sl-240\slmult0\keepn\widctlpar\faauto\rin0\lin0\itap0 \fs21\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\i\insrsid5786484 szPort}{\insrsid5786484 
\par }\pard\plain \s22\ql \li280\ri0\sa80\sl-240\slmult0\widctlpar\faauto\rin0\lin280\itap0 \fs21\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid5786484 Port number that server is listening on
\par }\pard\plain \s20\ql \li0\ri0\sl-240\slmult0\keepn\widctlpar\faauto\rin0\lin0\itap0 \fs21\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\i\insrsid5786484 iFamily}{\insrsid5786484 
\par }\pard\plain \s22\ql \li280\ri0\sa80\sl-240\slmult0\widctlpar\faauto\rin0\lin280\itap0 \fs21\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid5786484 Address family to use
\par }\pard\plain \s19\ql \li0\ri0\sb20\sl-220\slmult0\keepn\widctlpar\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240\faauto\rin0\lin0\itap0 \b\f1\fs21\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid5786484 Comments
\par }\pard\plain \ql \li0\ri0\sa160\sl240\slmult0\widctlpar\faauto\rin0\lin0\itap0 \fs21\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid5786484 
This function forms the initial TCP connection from the client process to the server process typically running on another machine. To connect to a local server, use "localhost" for szServer. Set iFamily to AF_INET (IPv4), AF_INET6 (IPv6) or AF_UNSPEC (don
't care).
\par }\pard\plain \s19\ql \li0\ri0\sb20\sl-220\slmult0\keepn\widctlpar\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240\faauto\rin0\lin0\itap0 \b\f1\fs21\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid5786484 Example
\par }\pard\plain \ql \li0\ri0\sa160\sl240\slmult0\widctlpar\faauto\rin0\lin0\itap0 \fs21\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid5786484 The following will connect to a backchannel service on AutoNet2 listening on port 55255:
\par }\pard\plain \s16\ql \li0\ri0\sl-220\slmult0\widctlpar\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800\faauto\rin0\lin0\itap0 \f2\fs16\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid5786484 
SOCKET BCSocket = BackChannel_ConnectEx("AutoNet2", "55255", AF_UNSPEC);
\par 
\par if(BCSocket == INVALID_SOCKET)
\par \tab \tab printf("BC_ConnectEx() failed");
\par 
\par }\pard\plain \s24\ql \li-1770\ri30\sb280\sa250\sl-120\slmult0\keepn\widctlpar\brdrb\brdrs\brdrw15\brdrcf2 \faauto\rin30\lin-1770\itap0 \fs8\cf8\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid5786484 
\par }\pard\plain \s1\ql \li-1800\ri0\sb200\sa80\sl-440\slmult0\keepn\widctlpar\faauto\outlinelevel0\rin0\lin-1800\itap0 \b\fs40\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid5786484 BackChannel_Disconnect
\par }\pard\plain \ql \li0\ri0\sa160\sl240\slmult0\widctlpar\faauto\rin0\lin0\itap0 \fs21\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\b\insrsid5786484 BOOL}{\insrsid5786484  }{\b\insrsid5786484 BackChannel_Disconnect(IN SOCKET}{\insrsid5786484  }{
\i\insrsid5786484 sock}{\b\insrsid5786484 ) }{\insrsid5786484 
\par Closes an already established command channel.
\par Defined in: PRIVATE/TEST/NET/COMMON/BACKCHANNEL/BACKCHANNEL.CPP
\par }\pard\plain \s19\ql \li0\ri0\sb20\sl-220\slmult0\keepn\widctlpar\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240\faauto\rin0\lin0\itap0 \b\f1\fs21\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid5786484 Return Value
\par }\pard\plain \ql \li0\ri0\sa160\sl240\slmult0\widctlpar\faauto\rin0\lin0\itap0 \fs21\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid5786484 TRUE if successful.  FALSE if an error occurred.
\par }\pard\plain \s19\ql \li0\ri0\sb20\sl-220\slmult0\keepn\widctlpar\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240\faauto\rin0\lin0\itap0 \b\f1\fs21\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid5786484 Parameters
\par }\pard\plain \s20\ql \li0\ri0\sl-240\slmult0\keepn\widctlpar\faauto\rin0\lin0\itap0 \fs21\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\i\insrsid5786484 sock}{\insrsid5786484 
\par }\pard\plain \s22\ql \li280\ri0\sa80\sl-240\slmult0\widctlpar\faauto\rin0\lin280\itap0 \fs21\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid5786484 Command channel socket from BackChannel_ConnectEx
\par }\pard\plain \s19\ql \li0\ri0\sb20\sl-220\slmult0\keepn\widctlpar\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240\faauto\rin0\lin0\itap0 \b\f1\fs21\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid5786484 Comments
\par }\pard\plain \ql \li0\ri0\sa160\sl240\slmult0\widctlpar\faauto\rin0\lin0\itap0 \fs21\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid5786484 
When a client is finished using a BackChannel command connection, it should call BackChannel_Disconnect to close the TCP connection.
\par }\pard\plain \s19\ql \li0\ri0\sb20\sl-220\slmult0\keepn\widctlpar\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240\faauto\rin0\lin0\itap0 \b\f1\fs21\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid5786484 Example
\par }\pard\plain \ql \li0\ri0\sa160\sl240\slmult0\widctlpar\faauto\rin0\lin0\itap0 \fs21\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid5786484 The following will establish and close a command channel:
\par }\pard\plain \s16\ql \li0\ri0\sl-220\slmult0\widctlpar\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800\faauto\rin0\lin0\itap0 \f2\fs16\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid5786484 
SOCKET BCSocket = BackChannel_ConnectEx("AutoNet2", "55255", AF_UNSPEC);
\par 
\par if(BCSocket != INVALID_SOCKET)
\par \{
\par \tab \tab printf("Command channel established to AutoNet2");
\par \tab \tab if(BackChannel_Disconnect(BCSocket))
\par \tab \tab \{
\par \tab \tab \tab \tab printf("Command channel disconnected");
\par \tab \tab \}
\par \tab \tab else
\par \tab \tab \tab \tab printf("BackChannel_Disconnect() failed");
\par \}
\par 
\par }\pard\plain \s24\ql \li-1770\ri30\sb280\sa250\sl-120\slmult0\keepn\widctlpar\brdrb\brdrs\brdrw15\brdrcf2 \faauto\rin30\lin-1770\itap0 \fs8\cf8\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid5786484 
\par }\pard\plain \s1\ql \li-1800\ri0\sb200\sa80\sl-440\slmult0\keepn\widctlpar\faauto\outlinelevel0\rin0\lin-1800\itap0 \b\fs40\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid5786484 BackChannel_GetResult
\par }\pard\plain \ql \li0\ri0\sa160\sl240\slmult0\widctlpar\faauto\rin0\lin0\itap0 \fs21\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\b\insrsid5786484 BOOL}{\insrsid5786484  }{\b\insrsid5786484 BackChannel_GetResult(IN SOCKET}{\insrsid5786484  }{
\i\insrsid5786484 sock}{\b\insrsid5786484 , OUT DWORD *}{\insrsid5786484  }{\i\insrsid5786484 pdwResult}{\b\insrsid5786484 , OUT BYTE **}{\insrsid5786484  }{\i\insrsid5786484 ppbReturnData}{\b\insrsid5786484 , IN OUT DWORD *}{\insrsid5786484  }{
\i\insrsid5786484 pdwReturnDataSize}{\b\insrsid5786484 ) }{\insrsid5786484 
\par Gets the latest result of commands sent by the client.
\par Defined in: PRIVATE/TEST/NET/COMMON/BACKCHANNEL/BACKCHANNEL.CPP
\par }\pard\plain \s19\ql \li0\ri0\sb20\sl-220\slmult0\keepn\widctlpar\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240\faauto\rin0\lin0\itap0 \b\f1\fs21\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid5786484 Return Value
\par }\pard\plain \ql \li0\ri0\sa160\sl240\slmult0\widctlpar\faauto\rin0\lin0\itap0 \fs21\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid5786484 Returns TRUE if the result was received successfully.  FALSE if an error occurred.
\par }\pard\plain \s19\ql \li0\ri0\sb20\sl-220\slmult0\keepn\widctlpar\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240\faauto\rin0\lin0\itap0 \b\f1\fs21\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid5786484 Parameters
\par }\pard\plain \s20\ql \li0\ri0\sl-240\slmult0\keepn\widctlpar\faauto\rin0\lin0\itap0 \fs21\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\i\insrsid5786484 sock}{\insrsid5786484 
\par }\pard\plain \s22\ql \li280\ri0\sa80\sl-240\slmult0\widctlpar\faauto\rin0\lin280\itap0 \fs21\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid5786484 Command channel socket from BackChannel_ConnectEx
\par }\pard\plain \s20\ql \li0\ri0\sl-240\slmult0\keepn\widctlpar\faauto\rin0\lin0\itap0 \fs21\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\i\insrsid5786484 pdwResult}{\insrsid5786484 
\par }\pard\plain \s22\ql \li280\ri0\sa80\sl-240\slmult0\widctlpar\faauto\rin0\lin280\itap0 \fs21\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid5786484 Return value of the command
\par }\pard\plain \s20\ql \li0\ri0\sl-240\slmult0\keepn\widctlpar\faauto\rin0\lin0\itap0 \fs21\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\i\insrsid5786484 ppbReturnData}{\insrsid5786484 
\par }\pard\plain \s22\ql \li280\ri0\sa80\sl-240\slmult0\widctlpar\faauto\rin0\lin280\itap0 \fs21\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid5786484 Pointer to binary data passed back by the command
\par }\pard\plain \s20\ql \li0\ri0\sl-240\slmult0\keepn\widctlpar\faauto\rin0\lin0\itap0 \fs21\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\i\insrsid5786484 pdwReturnDataSize}{\insrsid5786484 
\par }\pard\plain \s22\ql \li280\ri0\sa80\sl-240\slmult0\widctlpar\faauto\rin0\lin280\itap0 \fs21\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid5786484 Amount of binary data pointed to by ppbReturnData
\par }\pard\plain \s19\ql \li0\ri0\sb20\sl-220\slmult0\keepn\widctlpar\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240\faauto\rin0\lin0\itap0 \b\f1\fs21\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid5786484 Comments
\par }\pard\plain \ql \li0\ri0\sa160\sl240\slmult0\widctlpar\faauto\rin0\lin0\itap0 \fs21\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid5786484 
Returns the result of a command.  Will wait for a maximum of g_ResultTimeoutSecs. For each SendCommand, there must be a corresponding GetResult.  Only one GetResult call should be outstanding at a time.
\par ppbReturnData will be allocated with malloc() to match the amount of returned data. The caller should free() the buffer when it is no longer needed.
\par }\pard\plain \s19\ql \li0\ri0\sb20\sl-220\slmult0\keepn\widctlpar\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240\faauto\rin0\lin0\itap0 \b\f1\fs21\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid5786484 Example
\par }\pard\plain \ql \li0\ri0\sa160\sl240\slmult0\widctlpar\faauto\rin0\lin0\itap0 \fs21\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid5786484 The following will invoke a remote command and get its result:
\par }\pard\plain \s16\ql \li0\ri0\sl-220\slmult0\widctlpar\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800\faauto\rin0\lin0\itap0 \f2\fs16\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid5786484 #define MYCOMMAND\tab 10
\par 
\par SOCKET BCSocket = BackChannel_ConnectEx("AutoNet2", "55255", AF_UNSPEC);
\par 
\par if(BCSocket != INVALID_SOCKET)
\par \{
\par \tab \tab char szCommandData[] = "command", *szResultData = NULL;
\par \tab \tab DWORD dwDataSize, dwResult = 0;
\par \tab \tab dwDataSize = (stren(chCommandData) + 1) * sizeof(char);
\par \tab \tab if(BackChannel_SendCommand(BCSocket, MYCOMMAND, (BYTE *)szCommandData, dwDataSize))
\par \tab \tab \{
\par \tab \tab \tab \tab if(BackChannel_GetResult(BCSocket, &dwResult, &szResultData, &dwDataSize))
\par \tab \tab \tab \tab \{
\par \tab \tab \tab \tab \tab \tab printf("MYCOMMAND returned %d and %d bytes of data", dwResult, dwDataSize);
\par \tab \tab \tab \tab \tab \tab if(szResultData)
\par \tab \tab \tab \tab \tab \tab \{
\par \tab \tab \tab \tab \tab \tab \tab \tab printf("Result data = %s", szResultData);
\par \tab \tab \tab \tab \tab \tab \tab \tab free(szResultData);
\par \tab \tab \tab \tab \tab \tab \}
\par \tab \tab \tab \tab \}
\par \tab \tab \}
\par \tab \tab else
\par \tab \tab \tab \tab printf("BackChannel_ConnectEx() failed");
\par \}
\par 
\par }\pard\plain \s24\ql \li-1770\ri30\sb280\sa250\sl-120\slmult0\keepn\widctlpar\brdrb\brdrs\brdrw15\brdrcf2 \faauto\rin30\lin-1770\itap0 \fs8\cf8\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid5786484 
\par }\pard\plain \s1\ql \li-1800\ri0\sb200\sa80\sl-440\slmult0\keepn\widctlpar\faauto\outlinelevel0\rin0\lin-1800\itap0 \b\fs40\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid5786484 BackChannel_SendCommand
\par }\pard\plain \ql \li0\ri0\sa160\sl240\slmult0\widctlpar\faauto\rin0\lin0\itap0 \fs21\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\b\insrsid5786484 BOOL}{\insrsid5786484  }{\b\insrsid5786484 BackChannel_SendCommand(IN SOCKET}{\insrsid5786484  }{
\i\insrsid5786484 sock}{\b\insrsid5786484 , IN DWORD}{\insrsid5786484  }{\i\insrsid5786484 dwCommand}{\b\insrsid5786484 , IN BYTE *}{\insrsid5786484  }{\i\insrsid5786484 pbCommandData}{\b\insrsid5786484 , IN DWORD}{\insrsid5786484  }{\i\insrsid5786484 
dwCommandDataSize}{\b\insrsid5786484 ) }{\insrsid5786484 
\par Sends a command to the BackChannel server along with binary command data.
\par Defined in: PRIVATE/TEST/NET/COMMON/BACKCHANNEL/BACKCHANNEL.CPP
\par }\pard\plain \s19\ql \li0\ri0\sb20\sl-220\slmult0\keepn\widctlpar\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240\faauto\rin0\lin0\itap0 \b\f1\fs21\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid5786484 Return Value
\par }\pard\plain \ql \li0\ri0\sa160\sl240\slmult0\widctlpar\faauto\rin0\lin0\itap0 \fs21\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid5786484 Returns TRUE if the command was sent successfully.  FALSE if an error occurred.
\par }\pard\plain \s19\ql \li0\ri0\sb20\sl-220\slmult0\keepn\widctlpar\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240\faauto\rin0\lin0\itap0 \b\f1\fs21\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid5786484 Parameters
\par }\pard\plain \s20\ql \li0\ri0\sl-240\slmult0\keepn\widctlpar\faauto\rin0\lin0\itap0 \fs21\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\i\insrsid5786484 sock}{\insrsid5786484 
\par }\pard\plain \s22\ql \li280\ri0\sa80\sl-240\slmult0\widctlpar\faauto\rin0\lin280\itap0 \fs21\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid5786484 Command channel socket from BackChannel_ConnectEx
\par }\pard\plain \s20\ql \li0\ri0\sl-240\slmult0\keepn\widctlpar\faauto\rin0\lin0\itap0 \fs21\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\i\insrsid5786484 dwCommand}{\insrsid5786484 
\par }\pard\plain \s22\ql \li280\ri0\sa80\sl-240\slmult0\widctlpar\faauto\rin0\lin280\itap0 \fs21\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid5786484 Number of the command to execute
\par }\pard\plain \s20\ql \li0\ri0\sl-240\slmult0\keepn\widctlpar\faauto\rin0\lin0\itap0 \fs21\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\i\insrsid5786484 pbCommandData}{\insrsid5786484 
\par }\pard\plain \s22\ql \li280\ri0\sa80\sl-240\slmult0\widctlpar\faauto\rin0\lin280\itap0 \fs21\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid5786484 Pointer to binary data to pass to the server
\par }\pard\plain \s20\ql \li0\ri0\sl-240\slmult0\keepn\widctlpar\faauto\rin0\lin0\itap0 \fs21\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\i\insrsid5786484 dwCommandDataSize}{\insrsid5786484 
\par }\pard\plain \s22\ql \li280\ri0\sa80\sl-240\slmult0\widctlpar\faauto\rin0\lin280\itap0 \fs21\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid5786484 Amount of binary data pointed to by pbCommandData
\par }\pard\plain \s19\ql \li0\ri0\sb20\sl-220\slmult0\keepn\widctlpar\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240\faauto\rin0\lin0\itap0 \b\f1\fs21\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid5786484 Comments
\par }\pard\plain \ql \li0\ri0\sa160\sl240\slmult0\widctlpar\faauto\rin0\lin0\itap0 \fs21\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid5786484 Send
s a command to the BackChannel server over an established command channel.  The caller app is responsible for marshalling the command data and for ensuring the command number is correct.
\par }\pard\plain \s19\ql \li0\ri0\sb20\sl-220\slmult0\keepn\widctlpar\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240\faauto\rin0\lin0\itap0 \b\f1\fs21\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid5786484 Example
\par }\pard\plain \ql \li0\ri0\sa160\sl240\slmult0\widctlpar\faauto\rin0\lin0\itap0 \fs21\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid5786484 The following will invoke a remote command and pass it some simple data:
\par }\pard\plain \s16\ql \li0\ri0\sl-220\slmult0\widctlpar\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800\faauto\rin0\lin0\itap0 \f2\fs16\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid5786484 #define MYCOMMAND\tab 10
\par 
\par SOCKET BCSocket = BackChannel_ConnectEx("AutoNet2", "55255", AF_UNSPEC);
\par 
\par if(BCSocket != INVALID_SOCKET)
\par \{
\par \tab \tab DWORD dwData, dwDataSize, dwResult = 0;
\par \tab \tab dwDataSize = sizeof(dwData);
\par \tab \tab if(BackChannel_SendCommand(BCSocket, MYCOMMAND, (BYTE *)&dwData, dwDataSize))
\par \tab \tab \{
\par \tab \tab \tab \tab if(BackChannel_GetResult(BCSocket, &dwResult, NULL, NULL))
\par \tab \tab \tab \tab \tab \tab printf("MYCOMMAND returned %d", dwResult);
\par \tab \tab \}
\par \tab \tab else
\par \tab \tab \tab \tab printf("BackChannel_ConnectEx() failed");
\par \}
\par 
\par }\pard\plain \s24\ql \li-1770\ri30\sb280\sa250\sl-120\slmult0\keepn\widctlpar\brdrb\brdrs\brdrw15\brdrcf2 \faauto\rin30\lin-1770\itap0 \fs8\cf8\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid5786484 
\par }\pard\plain \s1\ql \li-1800\ri0\sb200\sa80\sl-440\slmult0\keepn\widctlpar\faauto\outlinelevel0\rin0\lin-1800\itap0 \b\fs40\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid5786484 BackChannel_StartService
\par }\pard\plain \ql \li0\ri0\sa160\sl240\slmult0\widctlpar\faauto\rin0\lin0\itap0 \fs21\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\b\insrsid5786484 HANDLE}{\insrsid5786484  }{\b\insrsid5786484 BackChannel_StartService(IN LPSTR}{\insrsid5786484  }{
\i\insrsid5786484 szPort}{\b\insrsid5786484 , IN LPSTARTUP_CALLBACK}{\insrsid5786484  }{\i\insrsid5786484 pfnStartupFunc}{\b\insrsid5786484 , IN LPCLEANUP_CALLBACK}{\insrsid5786484  }{\i\insrsid5786484 pfnCleanupFunc}{\b\insrsid5786484 , OUT HANDLE *}{
\insrsid5786484  }{\i\insrsid5786484 phServiceThread}{\b\insrsid5786484 ) }{\insrsid5786484 
\par Gets the latest result of commands sent by the client.
\par Defined in: PRIVATE/TEST/NET/COMMON/BACKCHANNEL/BACKCHANNEL.CPP
\par }\pard\plain \s19\ql \li0\ri0\sb20\sl-220\slmult0\keepn\widctlpar\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240\faauto\rin0\lin0\itap0 \b\f1\fs21\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid5786484 Return Value
\par }\pard\plain \ql \li0\ri0\sa160\sl240\slmult0\widctlpar\faauto\rin0\lin0\itap0 \fs21\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid5786484 Returns a handle to an event to set when the service should be stopped.  NULL if an error occurred.

\par }\pard\plain \s19\ql \li0\ri0\sb20\sl-220\slmult0\keepn\widctlpar\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240\faauto\rin0\lin0\itap0 \b\f1\fs21\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid5786484 Parameters
\par }\pard\plain \s20\ql \li0\ri0\sl-240\slmult0\keepn\widctlpar\faauto\rin0\lin0\itap0 \fs21\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\i\insrsid5786484 szPort}{\insrsid5786484 
\par }\pard\plain \s22\ql \li280\ri0\sa80\sl-240\slmult0\widctlpar\faauto\rin0\lin280\itap0 \fs21\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid5786484 Port for the command service to listen on
\par }\pard\plain \s20\ql \li0\ri0\sl-240\slmult0\keepn\widctlpar\faauto\rin0\lin0\itap0 \fs21\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\i\insrsid5786484 pfnStartupFunc}{\insrsid5786484 
\par }\pard\plain \s22\ql \li280\ri0\sa80\sl-240\slmult0\widctlpar\faauto\rin0\lin280\itap0 \fs21\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid5786484 Optional function called when a new connection is formed.
\par }\pard\plain \s20\ql \li0\ri0\sl-240\slmult0\keepn\widctlpar\faauto\rin0\lin0\itap0 \fs21\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\i\insrsid5786484 pfnCleanupFunc}{\insrsid5786484 
\par }\pard\plain \s22\ql \li280\ri0\sa80\sl-240\slmult0\widctlpar\faauto\rin0\lin280\itap0 \fs21\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid5786484 Optional function called when a connection is shut down.
\par }\pard\plain \s20\ql \li0\ri0\sl-240\slmult0\keepn\widctlpar\faauto\rin0\lin0\itap0 \fs21\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\i\insrsid5786484 phServiceThread}{\insrsid5786484 
\par }\pard\plain \s22\ql \li280\ri0\sa80\sl-240\slmult0\widctlpar\faauto\rin0\lin280\itap0 \fs21\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid5786484 Handle of the main service thread is returned via this pointer.
\par }\pard\plain \s19\ql \li0\ri0\sb20\sl-220\slmult0\keepn\widctlpar\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240\faauto\rin0\lin0\itap0 \b\f1\fs21\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid5786484 Comments
\par }\pard\plain \ql \li0\ri0\sa160\sl240\slmult0\widctlpar\faauto\rin0\lin0\itap0 \fs21\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid5786484 Returns the result of a command.  Wil
l wait for a maximum of g_ResultTimeoutSecs. For each SendCommand, there must be a corresponding GetResult.  Only one GetResult call should be outstanding at a time.
\par ppbReturnData will be allocated with malloc() to match the amount of returned data. The caller should free() the buffer when it is no longer needed.
\par }\pard\plain \s19\ql \li0\ri0\sb20\sl-220\slmult0\keepn\widctlpar\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240\faauto\rin0\lin0\itap0 \b\f1\fs21\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid5786484 Example
\par }\pard\plain \ql \li0\ri0\sa160\sl240\slmult0\widctlpar\faauto\rin0\lin0\itap0 \fs21\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid5786484 The following will start a BackChannel service with 2 commands on port 55255:
\par }\pard\plain \s16\ql \li0\ri0\sl-220\slmult0\widctlpar\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800\faauto\rin0\lin0\itap0 \f2\fs16\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid5786484 
COMMAND_HANDLER_ENTRY g_CommandHandlerArray[] =
\par \{
\par \tab \tab TEXT("Func1"),\tab \tab \tab 1,\tab \tab \tab \tab BcExHandlerFunction1,
\par \tab \tab TEXT("Func2a"),\tab \tab \tab 2,\tab \tab \tab \tab BcExHandlerFunction2,
\par \tab \tab TEXT("Func2b"),\tab \tab \tab 3,\tab \tab \tab \tab BcExHandlerFunction2,
\par \tab \tab NULL,\tab \tab \tab \tab \tab 0,\tab \tab \tab \tab NULL\tab // End of List
\par \};
\par 
\par 
\par BOOL ConnectionStartup(SOCKET sock)
\par \{
\par \tab \tab // Returning TRUE indicates the connection should be processed
\par \tab \tab // Returning FALSE indicates the client should be dropped
\par \tab \tab _tprintf(TEXT("ConnectionStartup: New client connection with socket handle 0x%08x"), sock);
\par \tab \tab return TRUE;
\par \}
\par BOOL ConnectionCleanup(SOCKET sock)
\par \{
\par \tab \tab _tprintf(TEXT("ConnectionCleanup: Cleaning up client with socket handle 0x%08x"), sock);
\par \tab \tab return TRUE;
\par \}
\par 
\par int mymain (int argc, TCHAR* argv[])
\par \{
\par WSADATA wsaData;
\par HANDLE hStopService;
\par 
\par CmnPrint_Initialize();
\par CmnPrint_RegisterPrintFunctionEx(PT_LOG, _tprintf, FALSE);
\par CmnPrint_RegisterPrintFunctionEx(PT_FAIL, _tprintf, FALSE);
\par 
\par WSAStartup(MAKEWORD(2,2), &wsaData);
\par 
\par HANDLE hServiceThread = NULL;
\par hStopService = BackChannel_StartService("55255", ConnectionStartup, ConnectionCleanup, &hServiceThread);
\par if(!hStopService)
\par \tab \tab _tprintf(TEXT("BackChannel_StartService() failed"));
\par else
\par \{
\par \tab \tab // This stops the service after 5 minutes.
\par \tab \tab WaitForSingleObject(hServiceThread, 5 * 60 * 1000);
\par 
\par \tab \tab _tprintf(TEXT("Setting StopService Event"));
\par \tab \tab SetEvent(hStopService);
\par 
\par \tab \tab _tprintf(TEXT("Waiting for service thread to finish..."));
\par \tab \tab WaitForSingleObject(hServiceThread, INFINITE);
\par 
\par \tab \tab _tprintf(TEXT("Backchannel service thread exited"));
\par \}
\par 
\par }}